/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 6 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 40 39>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    macros {
        sleep: sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp R &kp E>;
            label = "SLEEP";
            wait-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp E         &kp R          &kp T          &kp Y         &kp U      &kp I          &kp O    &kp P     &kp BACKSPACE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D         &kp F          &kp G          &kp H         &kp J      &kp K          &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C         &kp V          &kp B          &kp N         &kp M      &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LEFT_GUI  &kp BACKSPACE  &lt 1 ENTER    &lt 2 DELETE  &kp SPACE  &kp RIGHT_ALT
            >;
        };

        NumNav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp N1  &kp N2          &kp N3             &kp N4           &kp N5    &kp N6    &kp N7     &kp N8         &kp N9     &kp N0     &trans
&kp LEFT_CONTROL  &trans  &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans    &kp HOME  &kp LEFT   &kp DOWN       &kp UP     &kp RIGHT  &kp END
&kp LEFT_SHIFT    &trans  &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT       &trans    &trans    &trans     &kp PAGE_DOWN  &kp PG_UP  &trans     &sleep
                                          &kp LEFT_GUI       &kp BACKSPACE    &trans    &trans    &kp SPACE  &kp RIGHT_ALT
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB           &kp EXCL  &kp AT  &kp HASH      &kp DLLR       &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK      &kp LPAR  &kp RPAR  &kp BACKSPACE
&kp LEFT_CONTROL  &trans    &trans  &trans        &trans         &trans       &kp MINUS  &kp EQUAL  &kp LBKT       &kp RBKT  &kp BSLH  &kp GRAVE
&kp LEFT_SHIFT    &trans    &trans  &trans        &trans         &trans       &kp UNDER  &kp PLUS   &kp LBRC       &kp RBRC  &kp PIPE  &kp TILDE
                                    &kp LEFT_GUI  &kp BACKSPACE  &trans       &trans     &kp SPACE  &kp RIGHT_ALT
            >;
        };

        Control {
            bindings = <
&kp TAB         &kp F1      &kp F2        &kp F3        &kp F4         &kp F5          &kp F6  &kp F7     &kp F8         &kp F9  &kp F10  &trans
&trans          &kp F11     &kp F12       &trans        &trans         &trans          &trans  &trans     &trans         &trans  &trans   &trans
&kp LEFT_SHIFT  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3    &trans  &trans     &trans         &trans  &trans   &trans
                                          &kp LEFT_GUI  &kp BACKSPACE  &trans          &trans  &kp SPACE  &kp RIGHT_ALT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Combo {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
